#! /usr/bin/python2.7
import os
import scipy.io.wavfile
import numpy as np
import glob
from matplotlib import pylab
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix
from scikits.talkbox.features import mfcc

def create_fft(fn):
    sample_rate, X = scipy.io.wavfile.read(fn)
    fft_features = abs(scipy.fft(X)[:1000])
    base_fn, ext = os.path.splitext(fn)
    data_fn = base_fn + ".fft"
    np.save(data_fn, fft_features)

meow_list = ["WithCat", "NoCat"]
MEOW_DIR="/home/colin/Documents/Octave/CatMeow/"

def read_fft(fn, base_dir=MEOW_DIR, train_dir="Training"):
    X = []
    y = []
    for label, withMeow in enumerate(meow_list):
        print withMeow
        meow_dir = os.path.join(base_dir, withMeow, train_dir, "*.fft.npy")
        print meow_dir
        file_list = glob.glob(meow_dir)
        for fn in file_list:
            fft_features = np.load(fn)
            X.append(fft_features[:])
            y.append(label)
    return np.array(X), np.array(y)

positive_training_directory = "WithCat/Training/"
positive_training_files = []
positive_validation_directory = "WithCat/Validation/"
positive_validation_files = []
negative_training_directory = "NoCat/Training/"
negative_training_files = []
negative_validation_directory = "NoCat/Validation/"
negative_validation_files = []
positive_all_directory = "WithCat/AllFiles/"
positive_all_files = []
negative_all_directory = "NoCat/AllFiles/"
negative_all_files = []

for root, _, files in os.walk(positive_training_directory):
    for f in files:
        if f.endswith("wav"):
            positive_training_files.append(os.path.join(positive_training_directory, f))

for root, _, files in os.walk(positive_validation_directory):
    for f in files:
        if f.endswith("wav"):
            positive_validation_files.append(os.path.join(positive_validation_directory, f))

for root, _, files in os.walk(negative_training_directory):
    for f in files:
        if f.endswith("wav"):
            negative_training_files.append(os.path.join(negative_training_directory, f))

for root, _, files in os.walk(negative_validation_directory):
    for f in files:
        if f.endswith("wav"):
            negative_validation_files.append(os.path.join(negative_validation_directory, f))


for root, _, files in os.walk(positive_all_directory):
    for f in files:
        if f.endswith("wav"):
            positive_all_files.append(os.path.join(negative_training_directory, f))

for root, _, files in os.walk(negative_all_directory):
    for f in files:
        if f.endswith("wav"):
            negative_all_files.append(os.path.join(negative_validation_directory, f))



#all_training_files = positive_training_files
#all_training_files.extend(negative_training_files)

#for f in negative_training_files:
#    all_training_files.append(f)

for f in positive_training_files:
    print f
    create_fft(f)

for f in negative_training_files:
    print f
    create_fft(f)

for f in positive_validation_files:
    print f
    create_fft(f)

for f in negative_validation_files:
    print f
    create_fft(f)

for f in positive_all_files:
    print f
    create_fft(f)

for f in negative_all_files:
    print f
    create_fft(f)

# Read everything
X_train, y_train = read_fft(8000)
X_test, y_test = read_fft(8000, train_dir="Validation")

#Plot some of the stuff...
def plot_confusion_matrix(cm, meow_list, name, title):
    pylab.clf()
    pylab.matshow(cm, fignum=False, cmap='Blues', vmin=0, vmax=1.0)
    ax = pylab.axes()
    ax.set_xticks(range(len(meow_list)))
    ax.set_xticklabels(meow_list)
    ax.xaxis.set_ticks_position("bottom")

clf = LogisticRegression()
print clf

clf.fit(X_train,y_train)

print(np.exp(clf.intercept_), np.exp(clf.coef_.ravel()))

def lr_model(clf, X):
    return 1 / (1 + np.exp(-(clf.intercept_ + clf.coef_*X)))

#print("P(x=-1)=%.2f\tP(x=7)=%.2f" % (lr_model(clf, -1), lr_model(clf, 7)))

y_pred = clf.predict(X_test)

cm = confusion_matrix(y_test, y_pred)
name = "TestName"
title = "TestTitle"
#plot_confusion_matrix(cm, meow_list, name, title)

print cm




# Try to do some MFCC stuff...
def write_ceps(ceps, fn):
    base_fn, ext = os.path.splitext(fn)
    data_fn = base_fn + ".ceps"
    np.save(data_fn, ceps)
    print("Written %s" % data_fn)

def create_ceps(fn):
    sample_rate, X = scipy.io.wavfile.read(fn)
    ceps, mspec, spec = mfcc(X)
    write_ceps(ceps, fn)

def read_ceps(genre_list, base_dir=MEOW_DIR, train_dir="Training"):
    X = []
    y = []
    for label, genre in enumerate(genre_list):
        print label
        meow_dir = os.path.join(base_dir, genre, train_dir, "*.ceps.npy")
        print meow_dir
        for fn in glob.glob(meow_dir):
            print fn
            ceps = np.load(fn)
            num_ceps = len(ceps)
            if not np.isnan(np.sum(ceps)):
                X.append(np.mean(ceps[int(num_ceps * 1 / 10): int(num_ceps * 9 / 10)], axis = 0))
                y.append(label)
            else:
                print "NaN detected in file:"
    print np.array(X)
    print np.array(y)
    return np.array(X), np.array(y)

for f in positive_training_files:
    print(f)
    create_ceps(f)

for f in negative_training_files:
    print(f)
    create_ceps(f)

for f in positive_validation_files:
    print(f)
    create_ceps(f)

for f in negative_validation_files:
    print(f)
    create_ceps(f)

X2_train, y2_train = read_ceps(meow_list)
X2_validate, y2_validate = read_ceps(meow_list, train_dir="Validation")

print X2_train
print y2_train
print X2_validate
print y2_validate

clf2 = LogisticRegression()

clf2.fit(X2_train, y2_train)

print clf2

y2_pred = clf2.predict(X2_validate)

cm2 = confusion_matrix(y2_validate, y2_pred)

print cm2

#sampe_rate, X = scipy.io.wave
